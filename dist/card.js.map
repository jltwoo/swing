{"version":3,"sources":["card.js"],"names":[],"mappings":"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","file":"card.js","sourcesContent":["import _ from 'lodash';\r\nimport Sister from 'sister';\r\nimport Hammer from 'hammerjs';\r\nimport rebound from 'rebound';\r\nimport vendorPrefix from 'vendor-prefix';\r\nimport raf from 'raf';\r\nimport {\r\n    elementChildren,\r\n    isTouchDevice\r\n} from './util';\r\n\r\n/**\r\n * @param {Stack} stack\r\n * @param {HTMLElement} targetElement\r\n * @return {Object} An instance of Card.\r\n */\r\nconst Card = (stack, targetElement) => {\r\n    let card,\r\n        config,\r\n        currentX,\r\n        currentY,\r\n        doMove,\r\n        eventEmitter,\r\n        isDraging,\r\n        lastThrow,\r\n        lastTranslate,\r\n        lastX,\r\n        lastY,\r\n        mc,\r\n        onSpringUpdate,\r\n        springSystem,\r\n        springThrowIn,\r\n        springThrowOut,\r\n        throwOutDistance,\r\n        throwWhere;\r\n\r\n    const construct = () => {\r\n        card = {};\r\n        config = Card.makeConfig(stack.getConfig());\r\n        eventEmitter = Sister();\r\n        springSystem = stack.getSpringSystem();\r\n        springThrowIn = springSystem.createSpring(250, 10);\r\n        springThrowOut = springSystem.createSpring(500, 20);\r\n        lastThrow = {};\r\n        lastTranslate = {\r\n            x: 0,\r\n            y: 0\r\n        };\r\n\r\n        springThrowIn.setRestSpeedThreshold(0.05);\r\n        springThrowIn.setRestDisplacementThreshold(0.05);\r\n\r\n        springThrowOut.setRestSpeedThreshold(0.05);\r\n        springThrowOut.setRestDisplacementThreshold(0.05);\r\n\r\n        throwOutDistance = config.throwOutDistance(config.minThrowOutDistance, config.maxThrowOutDistance);\r\n\r\n        mc = new Hammer.Manager(targetElement, {\r\n            recognizers: [\r\n                [\r\n                    Hammer.Pan,\r\n                    {\r\n                        threshold: 2\r\n                    }\r\n                ]\r\n            ]\r\n        });\r\n\r\n        Card.appendToParent(targetElement);\r\n\r\n        eventEmitter.on('panstart', () => {\r\n            //Card.appendToParent(targetElement);\r\n            Card.recalculateTranslateZ(targetElement);\r\n\r\n            eventEmitter.trigger('dragstart', {\r\n                target: targetElement\r\n            });\r\n\r\n            currentX = 0;\r\n            currentY = 0;\r\n\r\n            isDraging = true;\r\n\r\n            (function animation () {\r\n                if (isDraging) {\r\n                    doMove();\r\n\r\n                    raf(animation);\r\n                }\r\n            })();\r\n        });\r\n\r\n        eventEmitter.on('panmove', (e) => {\r\n            currentX = e.deltaX;\r\n            currentY = e.deltaY;\r\n        });\r\n\r\n        eventEmitter.on('panend', (e) => {\r\n            isDraging = false;\r\n\r\n            var x = lastTranslate.x + e.deltaX;\r\n            var y = lastTranslate.y + e.deltaY;\r\n\r\n            if (config.isThrowOut(x, targetElement, config.throwOutConfidence(x, targetElement))) {\r\n                console.log(x,y);\r\n                const pileCoord = (x < 0)? config.leftPileCoord:config.rightPileCoord;\r\n                if(pileCoord){\r\n                    x = (isNaN(pileCoord.x))? x:pileCoord.x;\r\n                    y = (isNaN(pileCoord.y))? y:pileCoord.y;\r\n                } \r\n                card.throwOut(x, y);\r\n            } else {\r\n                card.throwIn(x, y);\r\n            }\r\n\r\n            eventEmitter.trigger('dragend', {\r\n                target: targetElement\r\n            });\r\n        });\r\n\r\n        // \"mousedown\" event fires late on touch enabled devices, thus listening\r\n        // to the touchstart event for touch enabled devices and mousedown otherwise.\r\n        if (isTouchDevice()) {\r\n            targetElement.addEventListener('touchstart', () => {\r\n                eventEmitter.trigger('panstart');\r\n            });\r\n\r\n            // Disable scrolling while dragging the element on the touch enabled devices.\r\n            // @see http://stackoverflow.com/a/12090055/368691\r\n            (() => {\r\n                let dragging;\r\n\r\n                targetElement.addEventListener('touchstart', () => {\r\n                    dragging = true;\r\n                });\r\n\r\n                targetElement.addEventListener('touchend', () => {\r\n                    dragging = false;\r\n                });\r\n\r\n                global.addEventListener('touchmove', (e) => {\r\n                    if (dragging) {\r\n                        e.preventDefault();\r\n                    }\r\n                });\r\n            })();\r\n        } else {\r\n            targetElement.addEventListener('mousedown', () => {\r\n                eventEmitter.trigger('panstart');\r\n            });\r\n        }\r\n\r\n        mc.on('panmove', (e) => {\r\n            eventEmitter.trigger('panmove', e);\r\n        });\r\n\r\n        mc.on('panend', (e) => {\r\n            eventEmitter.trigger('panend', e);\r\n        });\r\n\r\n        springThrowIn.addListener({\r\n            onSpringUpdate: (spring) => {\r\n                const value = spring.getCurrentValue();\r\n                const x = rebound.MathUtil.mapValueInRange(value, 0, 1, lastThrow.fromX, 0);\r\n                const y = rebound.MathUtil.mapValueInRange(value, 0, 1, lastThrow.fromY, 0);\r\n\r\n                onSpringUpdate(x, y);\r\n            },\r\n            onSpringAtRest: () => {\r\n                eventEmitter.trigger('throwinend', {\r\n                    target: targetElement\r\n                });\r\n            }\r\n        });\r\n\r\n        springThrowOut.addListener({\r\n            onSpringUpdate: (spring) => {\r\n                const value = spring.getCurrentValue();\r\n                const x = rebound.MathUtil.mapValueInRange(value, 0, 1, lastThrow.fromX, throwOutDistance * lastThrow.direction);\r\n                const y = lastThrow.fromY;\r\n\r\n                onSpringUpdate(x, y);\r\n            },\r\n            onSpringAtRest: () => {\r\n                eventEmitter.trigger('throwoutend', {\r\n                    target: targetElement\r\n                });\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Transforms card position based on the current environment variables.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        doMove = () => {\r\n            let r,\r\n                x,\r\n                y;\r\n\r\n            if (currentX === lastX && currentY === lastY) {\r\n                return;\r\n            }\r\n            raf(()=>{\r\n\r\n                lastX = currentX;\r\n                lastY = currentY;\r\n\r\n                x = lastTranslate.x + currentX;\r\n                y = lastTranslate.y + currentY;\r\n                r = config.rotation(x, y, targetElement, config.maxRotation);\r\n\r\n                config.transform(targetElement, x, y, r);\r\n\r\n                eventEmitter.trigger('dragmove', {\r\n                    target: targetElement,\r\n                    throwOutConfidence: config.throwOutConfidence(x, targetElement),\r\n                    throwDirection: x < 0 ? Card.DIRECTION_LEFT : Card.DIRECTION_RIGHT,\r\n                    offset: x\r\n                });\r\n\r\n            })\r\n        };\r\n\r\n        /**\r\n         * Invoked every time the physics solver updates the Spring's value.\r\n         *\r\n         * @param {Number} x\r\n         * @param {Number} y\r\n         * @return {undefined}\r\n         */\r\n        onSpringUpdate = (x, y) => {\r\n            raf(()=>{\r\n                let r;\r\n\r\n                r = config.rotation(x, y, targetElement, config.maxRotation);\r\n\r\n                lastTranslate.x = x || 0;\r\n                lastTranslate.y = y || 0;\r\n\r\n                Card.transform(targetElement, x, y, r);\r\n\r\n            })\r\n        };\r\n\r\n        /**\r\n         * @param {Card.THROW_IN|Card.THROW_OUT} where\r\n         * @param {Number} fromX\r\n         * @param {Number} fromY\r\n         * @return {undefined}\r\n         */\r\n        throwWhere = (where, fromX, fromY) => {\r\n            lastThrow.fromX = fromX;\r\n            lastThrow.fromY = fromY;\r\n            lastThrow.direction = lastThrow.fromX < 0 ? Card.DIRECTION_LEFT : Card.DIRECTION_RIGHT;\r\n\r\n            Card.recalculateTranslateZ(targetElement);\r\n\r\n            if (where === Card.THROW_IN) {\r\n                springThrowIn.setCurrentValue(0).setAtRest().setEndValue(1);\r\n\r\n                eventEmitter.trigger('throwin', {\r\n                    target: targetElement,\r\n                    throwDirection: lastThrow.direction\r\n                });\r\n            } else if (where === Card.THROW_OUT) {\r\n                springThrowOut.setCurrentValue(0).setAtRest().setVelocity(100).setEndValue(1);\r\n\r\n                eventEmitter.trigger('throwout', {\r\n                    target: targetElement,\r\n                    throwDirection: lastThrow.direction\r\n                });\r\n\r\n                if (lastThrow.direction === Card.DIRECTION_LEFT) {\r\n                    eventEmitter.trigger('throwoutleft', {\r\n                        target: targetElement,\r\n                        throwDirection: lastThrow.direction\r\n                    });\r\n                } else {\r\n                    eventEmitter.trigger('throwoutright', {\r\n                        target: targetElement,\r\n                        throwDirection: lastThrow.direction\r\n                    });\r\n                }\r\n            } else {\r\n                throw new Error('Invalid throw event.');\r\n            }\r\n        };\r\n    };\r\n\r\n    construct();\r\n\r\n    /**\r\n     * Alias\r\n     */\r\n    card.on = eventEmitter.on;\r\n    card.trigger = eventEmitter.trigger;\r\n\r\n    /**\r\n     * Throws a card into the stack from an arbitrary position.\r\n     *\r\n     * @param {Number} fromX\r\n     * @param {Number} fromY\r\n     * @return {undefined}\r\n     */\r\n    card.throwIn = (fromX, fromY) => {\r\n        throwWhere(Card.THROW_IN, fromX, fromY);\r\n    };\r\n\r\n    /**\r\n     * Throws a card out of the stack in the direction away from the original offset.\r\n     *\r\n     * @param {Number} fromX\r\n     * @param {Number} fromY\r\n     * @return {undefined}\r\n     */\r\n    card.throwOut = (fromX, fromY) => {\r\n        throwWhere(Card.THROW_OUT, fromX, fromY);\r\n    };\r\n\r\n    /**\r\n     * Unbinds all Hammer.Manager events.\r\n     * Removes the listeners from the physics simulation.\r\n     *\r\n     * @return {undefined}\r\n     */\r\n    card.destroy = () => {\r\n        mc.destroy();\r\n        springThrowIn.destroy();\r\n        springThrowOut.destroy();\r\n\r\n        stack.destroyCard(card);\r\n    };\r\n\r\n    return card;\r\n};\r\n\r\n/**\r\n * Creates a configuration object.\r\n *\r\n * @param {Object} config\r\n * @return {Object}\r\n */\r\nCard.makeConfig = (config = {}) => {\r\n    const defaultConfig = {\r\n        isThrowOut: Card.isThrowOut,\r\n        throwOutConfidence: Card.throwOutConfidence,\r\n        throwOutDistance: Card.throwOutDistance,\r\n        minThrowOutDistance: 400,\r\n        maxThrowOutDistance: 500,\r\n        rotation: Card.rotation,\r\n        leftPileCoord: null,\r\n        rightPileCoord: null,\r\n        maxRotation: 20,\r\n        transform: Card.transform\r\n    };\r\n\r\n    return _.assign({}, defaultConfig, config);\r\n};\r\n\r\n/**\r\n * Uses CSS transform to translate element position and rotation.\r\n *\r\n * Invoked in the event of `dragmove` and every time the physics solver is triggered.\r\n *\r\n * @param {HTMLElement} element\r\n * @param {Number} x Horizontal offset from the startDrag.\r\n * @param {Number} y Vertical offset from the startDrag.\r\n * @param {Number} r\r\n * @return {undefined}\r\n */\r\nCard.transform = (element, x, y, r) => {\r\n    raf(()=>{\r\n        var tz = element.style[vendorPrefix('transform')];\r\n        var match = tz.match(/translate3d\\(\\-?\\d+px\\,\\s*\\-?\\d+px\\,\\s*\\-?\\d+px\\)/gi);\r\n        var [x_px, y_px, z_px] = (match.length)?match[0].match(/\\-?\\d+px/gi):['0px','0px','0px'];\r\n        element.style[vendorPrefix('transform')] = \r\n        `translate3d(${Math.round(x)}px, ${Math.round(y)}px, ${z_px}) rotate(${r}deg)`;\r\n    })\r\n};\r\n\r\nCard.recalculateTranslateZ = (targetElement, resetStack) =>{\r\n    // We should use translate3d to set the z-ordering of the cards \r\n    // instead of detaching and reattaching node to container\r\n    // This reduces the DOM node re-rendering\r\n    raf(()=>{\r\n        for (var i = 0; i < targetElement.parentNode.children.length; i++) {\r\n            var tz = targetElement.parentNode.children[i].style[vendorPrefix('transform')];\r\n            var match = tz.match(/translate3d\\(\\-?\\d+px\\,\\s*\\-?\\d+px\\,\\s*\\-?\\d+px\\)/gi);\r\n            var [_unused, x, y, z] = (match.length)?match[0].match(/\\-?\\d+/gi):[null,'0','0','0'];\r\n            z=(targetElement.parentNode.children[i] !== targetElement)? Math.max(Number(z)-1,0): targetElement.parentNode.children.length-1;\r\n            x=(resetStack)? 0:x;\r\n            y=(resetStack)? 0:y;\r\n            z=(resetStack)? i:z;\r\n\r\n\r\n            targetElement.parentNode.children[i].style[vendorPrefix('transform')] = tz\r\n            .replace(\r\n                /translate3d\\(\\-?\\d+px\\,\\s*\\-?\\d+px\\,\\s*\\-?\\d+px\\)/gi,\r\n                `translate3d(${x}px, ${y}px, ${z}px)`\r\n            );\r\n        };\r\n    });\r\n}\r\n\r\n/**\r\n * Append element to the parentNode.\r\n *\r\n * This makes the element first among the siblings. The reason for using\r\n * this as opposed to zIndex is to allow CSS selector :nth-child.\r\n *\r\n * Invoked in the event of mousedown.\r\n * Invoked when card is added to the stack.\r\n *\r\n * @param {HTMLElement} element The target element.\r\n * @return {undefined}\r\n */\r\nCard.appendToParent = (element) => {\r\n    const parentNode = element.parentNode;\r\n    const siblings = elementChildren(parentNode);\r\n    const targetIndex = siblings.indexOf(element);\r\n\r\n    if (targetIndex + 1 !== siblings.length) {\r\n        parentNode.removeChild(element);\r\n        parentNode.appendChild(element);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns a value between 0 and 1 indicating the completeness of the throw out condition.\r\n *\r\n * Ration of the absolute distance from the original card position and element width.\r\n *\r\n * @param {Number} offset Distance from the dragStart.\r\n * @param {HTMLElement} element Element.\r\n * @return {Number}\r\n */\r\nCard.throwOutConfidence = (offset, element) => {\r\n    return Math.min(Math.abs(offset) / element.offsetWidth, 1);\r\n};\r\n\r\n/**\r\n * Determines if element is being thrown out of the stack.\r\n *\r\n * Element is considered to be thrown out when throwOutConfidence is equal to 1.\r\n *\r\n * @param {Number} offset Distance from the dragStart.\r\n * @param {HTMLElement} element Element.\r\n * @param {Number} throwOutConfidence config.throwOutConfidence\r\n * @return {Boolean}\r\n */\r\nCard.isThrowOut = (offset, element, throwOutConfidence) => {\r\n    return throwOutConfidence === 1;\r\n};\r\n\r\n/**\r\n * Calculates a distances at which the card is thrown out of the stack.\r\n *\r\n * @param {Number} min\r\n * @param {Number} max\r\n * @return {Number}\r\n */\r\nCard.throwOutDistance = (min, max) => {\r\n    return _.random(min, max);\r\n};\r\n\r\n/**\r\n * Calculates rotation based on the element x and y offset, element width and maxRotation variables.\r\n *\r\n * @param {Number} x Horizontal offset from the startDrag.\r\n * @param {Number} y Vertical offset from the startDrag.\r\n * @param {HTMLElement} element Element.\r\n * @param {Number} maxRotation\r\n * @return {Number} Rotation angle expressed in degrees.\r\n */\r\nCard.rotation = (x, y, element, maxRotation) => {\r\n    const horizontalOffset = Math.min(Math.max(x / element.offsetWidth, -1), 1);\r\n    const verticalOffset = (y > 0 ? 1 : -1) * Math.min(Math.abs(y) / 100, 1);\r\n    const rotation = horizontalOffset * verticalOffset * maxRotation;\r\n\r\n    return rotation;\r\n};\r\n\r\nCard.DIRECTION_LEFT = -1;\r\nCard.DIRECTION_RIGHT = 1;\r\n\r\nCard.THROW_IN = 'in';\r\nCard.THROW_OUT = 'out';\r\n\r\nexport default Card;\r\n"],"sourceRoot":"/source/"}