{"version":3,"sources":["card.js"],"names":[],"mappings":"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","file":"card.js","sourcesContent":["import _ from 'lodash';\r\nimport Sister from 'sister';\r\nimport Hammer from 'hammerjs';\r\nimport rebound from 'rebound';\r\nimport vendorPrefix from 'vendor-prefix';\r\nimport raf from 'raf';\r\nimport {\r\n    elementChildren,\r\n    isTouchDevice\r\n} from './util';\r\n\r\n/**\r\n * @param {Stack} stack\r\n * @param {HTMLElement} targetElement\r\n * @return {Object} An instance of Card.\r\n */\r\nconst Card = (stack, targetElement) => {\r\n    let card,\r\n        config,\r\n        currentX,\r\n        currentY,\r\n        doMove,\r\n        eventEmitter,\r\n        isDraging,\r\n        lastThrow,\r\n        lastTranslate,\r\n        lastX,\r\n        lastY,\r\n        mc,\r\n        onSpringUpdate,\r\n        springSystem,\r\n        springThrowIn,\r\n        springThrowOut,\r\n        throwOutDistance,\r\n        throwWhere;\r\n\r\n    const construct = () => {\r\n        card = {};\r\n        config = Card.makeConfig(stack.getConfig());\r\n        eventEmitter = Sister();\r\n        springSystem = stack.getSpringSystem();\r\n        springThrowIn = springSystem.createSpring(250, 10);\r\n        springThrowOut = springSystem.createSpring(500, 20);\r\n        lastThrow = {};\r\n        lastTranslate = {\r\n            x: 0,\r\n            y: 0\r\n        };\r\n\r\n        springThrowIn.setRestSpeedThreshold(0.05);\r\n        springThrowIn.setRestDisplacementThreshold(0.05);\r\n\r\n        springThrowOut.setRestSpeedThreshold(0.05);\r\n        springThrowOut.setRestDisplacementThreshold(0.05);\r\n\r\n        throwOutDistance = config.throwOutDistance(config.minThrowOutDistance, config.maxThrowOutDistance);\r\n\r\n        mc = new Hammer.Manager(targetElement, {\r\n            recognizers: [\r\n                [\r\n                    Hammer.Pan,\r\n                    {\r\n                        threshold: 2\r\n                    }\r\n                ]\r\n            ]\r\n        });\r\n\r\n        Card.appendToParent(targetElement);\r\n\r\n        eventEmitter.on('panstart', () => {\r\n            if(isDraging) return;\r\n            //Card.appendToParent(targetElement);\r\n            Card.recalculateTranslateZ(targetElement);\r\n\r\n            eventEmitter.trigger('dragstart', {\r\n                target: targetElement\r\n            });\r\n\r\n            currentX = 0;\r\n            currentY = 0;\r\n\r\n            isDraging = true;\r\n\r\n            (function animation () {\r\n                if (isDraging) {\r\n                    doMove();\r\n\r\n                    raf(animation);\r\n                }\r\n            })();\r\n        });\r\n\r\n        eventEmitter.on('panmove', (e) => {\r\n            currentX = e.deltaX;\r\n            currentY = e.deltaY;\r\n        });\r\n\r\n        eventEmitter.on('panend', (e) => {\r\n            isDraging = false;\r\n\r\n            var x = lastTranslate.x + e.deltaX;\r\n            var y = lastTranslate.y + e.deltaY;\r\n\r\n            if (config.isThrowOut(x, targetElement, config.throwOutConfidence(x, targetElement))) {\r\n                console.log(x,y);\r\n                const pileCoord = (x < 0)? config.leftPileCoord:config.rightPileCoord;\r\n                if(pileCoord){\r\n                    x = (isNaN(pileCoord.x))? x:pileCoord.x;\r\n                    y = (isNaN(pileCoord.y))? y:pileCoord.y;\r\n                } \r\n                card.throwOut(x, y);\r\n            } else {\r\n                card.throwIn(x, y);\r\n            }\r\n\r\n            eventEmitter.trigger('dragend', {\r\n                target: targetElement\r\n            });\r\n        });\r\n\r\n        if (isTouchDevice()) {\r\n            // \"mousedown\" event fires late on touch enabled devices, thus listening\r\n            // to the touchstart event for touch enabled devices and mousedown otherwise.\r\n            targetElement.addEventListener('touchstart', () => {\r\n                eventEmitter.trigger('panstart');\r\n            });\r\n            targetElement.addEventListener('mousedown', () => {\r\n                eventEmitter.trigger('panstart');\r\n            });\r\n\r\n            // Disable scrolling while dragging the element on the touch enabled devices.\r\n            // @see http://stackoverflow.com/a/12090055/368691\r\n            (() => {\r\n                let dragging;\r\n\r\n                targetElement.addEventListener('touchstart', () => {\r\n                    dragging = true;\r\n                });\r\n\r\n                targetElement.addEventListener('touchend', () => {\r\n                    dragging = false;\r\n                });\r\n\r\n                global.addEventListener('touchmove', (e) => {\r\n                    if (dragging) {\r\n                        e.preventDefault();\r\n                    }\r\n                });\r\n            })();\r\n        } else {\r\n            targetElement.addEventListener('mousedown', () => {\r\n                eventEmitter.trigger('panstart');\r\n            });\r\n        }\r\n\r\n        mc.on('panmove', (e) => {\r\n            eventEmitter.trigger('panmove', e);\r\n        });\r\n\r\n        mc.on('panend', (e) => {\r\n            eventEmitter.trigger('panend', e);\r\n        });\r\n\r\n        springThrowIn.addListener({\r\n            onSpringUpdate: (spring) => {\r\n                const value = spring.getCurrentValue();\r\n                const x = rebound.MathUtil.mapValueInRange(value, 0, 1, lastThrow.fromX, 0);\r\n                const y = rebound.MathUtil.mapValueInRange(value, 0, 1, lastThrow.fromY, 0);\r\n\r\n                onSpringUpdate(x, y);\r\n            },\r\n            onSpringAtRest: () => {\r\n                eventEmitter.trigger('throwinend', {\r\n                    target: targetElement\r\n                });\r\n            }\r\n        });\r\n\r\n        springThrowOut.addListener({\r\n            onSpringUpdate: (spring) => {\r\n                const value = spring.getCurrentValue();\r\n                const x = rebound.MathUtil.mapValueInRange(value, 0, 1, lastThrow.fromX, throwOutDistance * lastThrow.direction);\r\n                const y = lastThrow.fromY;\r\n\r\n                onSpringUpdate(x, y);\r\n            },\r\n            onSpringAtRest: () => {\r\n                eventEmitter.trigger('throwoutend', {\r\n                    target: targetElement\r\n                });\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Transforms card position based on the current environment variables.\r\n         *\r\n         * @return {undefined}\r\n         */\r\n        doMove = () => {\r\n            let r,\r\n                x,\r\n                y;\r\n\r\n            if (currentX === lastX && currentY === lastY) {\r\n                return;\r\n            }\r\n            raf(()=>{\r\n\r\n                lastX = currentX;\r\n                lastY = currentY;\r\n\r\n                x = lastTranslate.x + currentX;\r\n                y = lastTranslate.y + currentY;\r\n                r = config.rotation(x, y, targetElement, config.maxRotation);\r\n\r\n                config.transform(targetElement, x, y, r);\r\n\r\n                eventEmitter.trigger('dragmove', {\r\n                    target: targetElement,\r\n                    throwOutConfidence: config.throwOutConfidence(x, targetElement),\r\n                    throwDirection: x < 0 ? Card.DIRECTION_LEFT : Card.DIRECTION_RIGHT,\r\n                    offset: x\r\n                });\r\n\r\n            })\r\n        };\r\n\r\n        /**\r\n         * Invoked every time the physics solver updates the Spring's value.\r\n         *\r\n         * @param {Number} x\r\n         * @param {Number} y\r\n         * @return {undefined}\r\n         */\r\n        onSpringUpdate = (x, y) => {\r\n            raf(()=>{\r\n                let r;\r\n\r\n                r = config.rotation(x, y, targetElement, config.maxRotation);\r\n\r\n                lastTranslate.x = x || 0;\r\n                lastTranslate.y = y || 0;\r\n\r\n                Card.transform(targetElement, x, y, r);\r\n\r\n            })\r\n        };\r\n\r\n        /**\r\n         * @param {Card.THROW_IN|Card.THROW_OUT} where\r\n         * @param {Number} fromX\r\n         * @param {Number} fromY\r\n         * @return {undefined}\r\n         */\r\n        throwWhere = (where, fromX, fromY) => {\r\n            lastThrow.fromX = fromX;\r\n            lastThrow.fromY = fromY;\r\n            lastThrow.direction = lastThrow.fromX < 0 ? Card.DIRECTION_LEFT : Card.DIRECTION_RIGHT;\r\n\r\n            Card.recalculateTranslateZ(targetElement);\r\n\r\n            if (where === Card.THROW_IN) {\r\n                springThrowIn.setCurrentValue(0).setAtRest().setEndValue(1);\r\n\r\n                eventEmitter.trigger('throwin', {\r\n                    target: targetElement,\r\n                    throwDirection: lastThrow.direction\r\n                });\r\n            } else if (where === Card.THROW_OUT) {\r\n                springThrowOut.setCurrentValue(0).setAtRest().setVelocity(100).setEndValue(1);\r\n\r\n                eventEmitter.trigger('throwout', {\r\n                    target: targetElement,\r\n                    throwDirection: lastThrow.direction\r\n                });\r\n\r\n                if (lastThrow.direction === Card.DIRECTION_LEFT) {\r\n                    eventEmitter.trigger('throwoutleft', {\r\n                        target: targetElement,\r\n                        throwDirection: lastThrow.direction\r\n                    });\r\n                } else {\r\n                    eventEmitter.trigger('throwoutright', {\r\n                        target: targetElement,\r\n                        throwDirection: lastThrow.direction\r\n                    });\r\n                }\r\n            } else {\r\n                throw new Error('Invalid throw event.');\r\n            }\r\n        };\r\n    };\r\n\r\n    construct();\r\n\r\n    /**\r\n     * Alias\r\n     */\r\n    card.on = eventEmitter.on;\r\n    card.trigger = eventEmitter.trigger;\r\n\r\n    /**\r\n     * Throws a card into the stack from an arbitrary position.\r\n     *\r\n     * @param {Number} fromX\r\n     * @param {Number} fromY\r\n     * @return {undefined}\r\n     */\r\n    card.throwIn = (fromX, fromY) => {\r\n        throwWhere(Card.THROW_IN, fromX, fromY);\r\n    };\r\n\r\n    /**\r\n     * Throws a card out of the stack in the direction away from the original offset.\r\n     *\r\n     * @param {Number} fromX\r\n     * @param {Number} fromY\r\n     * @return {undefined}\r\n     */\r\n    card.throwOut = (fromX, fromY) => {\r\n        throwWhere(Card.THROW_OUT, fromX, fromY);\r\n    };\r\n\r\n    /**\r\n     * Unbinds all Hammer.Manager events.\r\n     * Removes the listeners from the physics simulation.\r\n     *\r\n     * @return {undefined}\r\n     */\r\n    card.destroy = () => {\r\n        mc.destroy();\r\n        springThrowIn.destroy();\r\n        springThrowOut.destroy();\r\n\r\n        stack.destroyCard(card);\r\n    };\r\n\r\n    return card;\r\n};\r\n\r\n/**\r\n * Creates a configuration object.\r\n *\r\n * @param {Object} config\r\n * @return {Object}\r\n */\r\nCard.makeConfig = (config = {}) => {\r\n    const defaultConfig = {\r\n        isThrowOut: Card.isThrowOut,\r\n        throwOutConfidence: Card.throwOutConfidence,\r\n        throwOutDistance: Card.throwOutDistance,\r\n        minThrowOutDistance: 400,\r\n        maxThrowOutDistance: 500,\r\n        rotation: Card.rotation,\r\n        leftPileCoord: null,\r\n        rightPileCoord: null,\r\n        maxRotation: 20,\r\n        transform: Card.transform\r\n    };\r\n\r\n    return _.assign({}, defaultConfig, config);\r\n};\r\n\r\n/**\r\n * Uses CSS transform to translate element position and rotation.\r\n *\r\n * Invoked in the event of `dragmove` and every time the physics solver is triggered.\r\n *\r\n * @param {HTMLElement} element\r\n * @param {Number} x Horizontal offset from the startDrag.\r\n * @param {Number} y Vertical offset from the startDrag.\r\n * @param {Number} r\r\n * @return {undefined}\r\n */\r\nCard.transform = (element, x, y, r) => {\r\n    raf(()=>{\r\n        var tz = element.style[vendorPrefix('transform')];\r\n        var match = tz.match(/translate3d\\(\\-?\\d+px\\,\\s*\\-?\\d+px\\,\\s*\\-?\\d+px\\)/gi);\r\n        var [x_px, y_px, z_px] = (match.length)?match[0].match(/\\-?\\d+px/gi):['0px','0px','0px'];\r\n        element.style[vendorPrefix('transform')] = \r\n        `translate3d(${Math.round(x)}px, ${Math.round(y)}px, ${z_px}) rotate(${r}deg)`;\r\n    })\r\n};\r\n\r\nCard.recalculateTranslateZ = (targetElement, resetStack) =>{\r\n    // We should use translate3d to set the z-ordering of the cards \r\n    // instead of detaching and reattaching node to container\r\n    // This reduces the DOM node re-rendering\r\n    raf(()=>{\r\n        for (var i = 0; i < targetElement.parentNode.children.length; i++) {\r\n            var tz = targetElement.parentNode.children[i].style[vendorPrefix('transform')];\r\n            var match = tz.match(/translate3d\\(\\-?\\d+px\\,\\s*\\-?\\d+px\\,\\s*\\-?\\d+px\\)/gi);\r\n            var [_unused, x, y, z] = (match.length)?match[0].match(/\\-?\\d+/gi):[null,'0','0','0'];\r\n            z=(targetElement.parentNode.children[i] !== targetElement)? Math.max(Number(z)-1,0): targetElement.parentNode.children.length-1;\r\n            x=(resetStack)? 0:x;\r\n            y=(resetStack)? 0:y;\r\n            z=(resetStack)? i:z;\r\n\r\n\r\n            targetElement.parentNode.children[i].style[vendorPrefix('transform')] = tz\r\n            .replace(\r\n                /translate3d\\(\\-?\\d+px\\,\\s*\\-?\\d+px\\,\\s*\\-?\\d+px\\)/gi,\r\n                `translate3d(${x}px, ${y}px, ${z}px)`\r\n            );\r\n        };\r\n    });\r\n}\r\n\r\n/**\r\n * Append element to the parentNode.\r\n *\r\n * This makes the element first among the siblings. The reason for using\r\n * this as opposed to zIndex is to allow CSS selector :nth-child.\r\n *\r\n * Invoked in the event of mousedown.\r\n * Invoked when card is added to the stack.\r\n *\r\n * @param {HTMLElement} element The target element.\r\n * @return {undefined}\r\n */\r\nCard.appendToParent = (element) => {\r\n    const parentNode = element.parentNode;\r\n    const siblings = elementChildren(parentNode);\r\n    const targetIndex = siblings.indexOf(element);\r\n\r\n    if (targetIndex + 1 !== siblings.length) {\r\n        parentNode.removeChild(element);\r\n        parentNode.appendChild(element);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns a value between 0 and 1 indicating the completeness of the throw out condition.\r\n *\r\n * Ration of the absolute distance from the original card position and element width.\r\n *\r\n * @param {Number} offset Distance from the dragStart.\r\n * @param {HTMLElement} element Element.\r\n * @return {Number}\r\n */\r\nCard.throwOutConfidence = (offset, element) => {\r\n    return Math.min(Math.abs(offset) / element.offsetWidth, 1);\r\n};\r\n\r\n/**\r\n * Determines if element is being thrown out of the stack.\r\n *\r\n * Element is considered to be thrown out when throwOutConfidence is equal to 1.\r\n *\r\n * @param {Number} offset Distance from the dragStart.\r\n * @param {HTMLElement} element Element.\r\n * @param {Number} throwOutConfidence config.throwOutConfidence\r\n * @return {Boolean}\r\n */\r\nCard.isThrowOut = (offset, element, throwOutConfidence) => {\r\n    return throwOutConfidence === 1;\r\n};\r\n\r\n/**\r\n * Calculates a distances at which the card is thrown out of the stack.\r\n *\r\n * @param {Number} min\r\n * @param {Number} max\r\n * @return {Number}\r\n */\r\nCard.throwOutDistance = (min, max) => {\r\n    return _.random(min, max);\r\n};\r\n\r\n/**\r\n * Calculates rotation based on the element x and y offset, element width and maxRotation variables.\r\n *\r\n * @param {Number} x Horizontal offset from the startDrag.\r\n * @param {Number} y Vertical offset from the startDrag.\r\n * @param {HTMLElement} element Element.\r\n * @param {Number} maxRotation\r\n * @return {Number} Rotation angle expressed in degrees.\r\n */\r\nCard.rotation = (x, y, element, maxRotation) => {\r\n    const horizontalOffset = Math.min(Math.max(x / element.offsetWidth, -1), 1);\r\n    const verticalOffset = (y > 0 ? 1 : -1) * Math.min(Math.abs(y) / 100, 1);\r\n    const rotation = horizontalOffset * verticalOffset * maxRotation;\r\n\r\n    return rotation;\r\n};\r\n\r\nCard.DIRECTION_LEFT = -1;\r\nCard.DIRECTION_RIGHT = 1;\r\n\r\nCard.THROW_IN = 'in';\r\nCard.THROW_OUT = 'out';\r\n\r\nexport default Card;\r\n"]}